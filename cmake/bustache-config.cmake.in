@PACKAGE_INIT@

# =============================================================================
# Bustache CMake Configuration
# =============================================================================
#
# This file provides the following imported targets:
#
#   bustache::bustache      - Main library target
#   bustache::headers       - Header-only interface target
#
# The following variables are also defined:
#
#   bustache_FOUND          - TRUE if found
#   bustache_VERSION        - Version string
#   bustache_VERSION_MAJOR  - Major version number
#   bustache_VERSION_MINOR  - Minor version number
#   bustache_VERSION_PATCH  - Patch version number
#   bustache_INCLUDE_DIRS   - Include directories
#   bustache_LIBRARIES      - Libraries to link
#   bustache_LIBRARY_TYPE   - SHARED, STATIC, or INTERFACE
#
# Usage:
#
#   find_package(bustache REQUIRED)
#   target_link_libraries(my_target PRIVATE bustache::bustache)
#
# For header-only usage:
#
#   find_package(bustache REQUIRED)
#   target_link_libraries(my_target PRIVATE bustache::headers)
#
# =============================================================================

include(CMakeFindDependencyMacro)

# Find required dependencies
set(BUSTACHE_USE_FMT @BUSTACHE_USE_FMT@)
if(BUSTACHE_USE_FMT)
    find_dependency(fmt 8.0)
endif()

# Include the export file
include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-targets.cmake")

# Set compatibility variables
set(@PROJECT_NAME@_VERSION @PROJECT_VERSION@)
set(@PROJECT_NAME@_VERSION_MAJOR @PROJECT_VERSION_MAJOR@)
set(@PROJECT_NAME@_VERSION_MINOR @PROJECT_VERSION_MINOR@)
set(@PROJECT_NAME@_VERSION_PATCH @PROJECT_VERSION_PATCH@)

# Determine library type
if(TARGET @PROJECT_NAME@::@PROJECT_NAME@)
    get_target_property(_bustache_type @PROJECT_NAME@::@PROJECT_NAME@ TYPE)
    if(_bustache_type STREQUAL "SHARED_LIBRARY")
        set(@PROJECT_NAME@_LIBRARY_TYPE "SHARED")
    elseif(_bustache_type STREQUAL "STATIC_LIBRARY")
        set(@PROJECT_NAME@_LIBRARY_TYPE "STATIC")
    else()
        set(@PROJECT_NAME@_LIBRARY_TYPE "INTERFACE")
    endif()
else()
    set(@PROJECT_NAME@_LIBRARY_TYPE "INTERFACE")
endif()

# Set include directories (for compatibility)
get_target_property(@PROJECT_NAME@_INCLUDE_DIRS @PROJECT_NAME@::headers INTERFACE_INCLUDE_DIRECTORIES)

# Set libraries (for compatibility)
if(TARGET @PROJECT_NAME@::@PROJECT_NAME@)
    set(@PROJECT_NAME@_LIBRARIES @PROJECT_NAME@::@PROJECT_NAME@)
else()
    set(@PROJECT_NAME@_LIBRARIES @PROJECT_NAME@::headers)
endif()

# Check required components (if any)
set(@PROJECT_NAME@_FOUND TRUE)

# Print configuration (optional, for debugging)
if(NOT @PROJECT_NAME@_FIND_QUIETLY)
    message(STATUS "Found @PROJECT_NAME@ ${@PROJECT_NAME@_VERSION}")
    message(STATUS "  Library type: ${@PROJECT_NAME@_LIBRARY_TYPE}")
    if(BUSTACHE_USE_FMT)
        message(STATUS "  Using fmt library")
    endif()
endif()

check_required_components(@PROJECT_NAME@)