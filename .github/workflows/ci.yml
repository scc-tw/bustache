name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  # =============================================================================
  # Linux GCC Builds with Sanitizers (using cplusplus-ci Docker images)
  # =============================================================================
  linux-gcc:
    name: Linux GCC ${{ matrix.gcc-version }} (${{ matrix.build-type }}${{ matrix.sanitizer && ', ' || '' }}${{ matrix.sanitizer }})
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.gcc-version == 15 || matrix.gcc-version == 16 }}
    container:
      image: ghcr.io/mattkretz/cplusplus-ci/gcc${{ matrix.gcc-version }}
    strategy:
      fail-fast: false
      matrix:
        gcc-version: [10, 11, 12, 13, 14, 15, 16]
        build-type: [Debug, Release]
        sanitizer: ['', 'address', 'undefined', 'thread']
        exclude:
          # Don't run all sanitizers on all versions to reduce CI time
          - gcc-version: 10
            sanitizer: 'thread'
          - gcc-version: 12
            sanitizer: 'thread'
          - gcc-version: 14  
            sanitizer: 'thread'
          # Thread sanitizer with Release builds can be flaky
          - build-type: Release
            sanitizer: 'thread'
          # Reduce testing on newer/older GCC versions (keep essential tests only)
          - gcc-version: 10
            build-type: Release
            sanitizer: 'undefined'
          - gcc-version: 14
            build-type: Release
            sanitizer: 'undefined'
          - gcc-version: 15
            sanitizer: 'thread'
          - gcc-version: 15
            build-type: Release
            sanitizer: 'undefined'
          - gcc-version: 16
            sanitizer: 'thread'
          - gcc-version: 16
            build-type: Release
            sanitizer: 'undefined'
          # GCC 15/16 are experimental - allow them to fail and only test essential configurations
          - gcc-version: 15
            sanitizer: 'address'
          - gcc-version: 16
            sanitizer: 'address'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify GCC Installation
        run: |
          gcc --version
          g++ --version
          echo "GCC version verification completed"

      - name: Configure CMake
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
            -DCMAKE_CXX_COMPILER=g++ \
            -DBUSTACHE_ENABLE_TESTING=ON \
            -DBUSTACHE_DEVELOPER_MODE=ON \
            ${{ matrix.sanitizer == 'address' && '-DBUSTACHE_ENABLE_SANITIZER_ADDRESS=ON' || '' }} \
            ${{ matrix.sanitizer == 'undefined' && '-DBUSTACHE_ENABLE_SANITIZER_UNDEFINED=ON' || '' }} \
            ${{ matrix.sanitizer == 'thread' && '-DBUSTACHE_ENABLE_SANITIZER_THREAD=ON' || '' }}

      - name: Build
        run: cmake --build build --parallel

      - name: Test
        run: |
          cd build
          ctest --output-on-failure --parallel --timeout 300
        env:
          # Sanitizer options
          ASAN_OPTIONS: detect_leaks=1:abort_on_error=1:check_initialization_order=1:strict_init_order=1
          UBSAN_OPTIONS: print_stacktrace=1:abort_on_error=1
          TSAN_OPTIONS: abort_on_error=1

  # =============================================================================
  # Linux LLVM Clang Builds with Sanitizers (using cplusplus-ci Docker images)
  # =============================================================================
  linux-clang:
    name: Linux Clang ${{ matrix.clang-version }} (${{ matrix.build-type }}${{ matrix.sanitizer && ', ' || '' }}${{ matrix.sanitizer }})
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.clang-version >= 20 }}
    container:
      image: ghcr.io/mattkretz/cplusplus-ci/clang${{ matrix.clang-version }}
    strategy:
      fail-fast: false
      matrix:
        clang-version: [15, 16, 17, 18, 19, 20, 21, 22]
        build-type: [Debug, Release]
        sanitizer: ['']  # Temporarily disabled: 'address', 'undefined', 'memory', 'thread'
        exclude:
          # Memory sanitizer only on newer Clang versions
          - clang-version: 15
            sanitizer: 'memory'
          # Don't run all sanitizers on all versions to reduce CI time
          - clang-version: 15
            sanitizer: 'thread'
          - clang-version: 16
            sanitizer: 'thread'
          # Thread sanitizer with Release builds can be flaky
          - build-type: Release
            sanitizer: 'thread'
          # Reduce testing on newer Clang versions (keep essential tests only)
          - clang-version: 20
            sanitizer: 'thread'
          - clang-version: 20
            build-type: Release
            sanitizer: 'undefined'
          - clang-version: 21
            sanitizer: 'thread'
          - clang-version: 21
            build-type: Release
            sanitizer: 'undefined'
          - clang-version: 22
            sanitizer: 'thread'
          - clang-version: 22
            build-type: Release
            sanitizer: 'undefined'
          # Newer Clang versions are experimental - allow them to fail and only test essential configurations
          - clang-version: 20
            sanitizer: 'address'
          - clang-version: 21
            sanitizer: 'address'
          - clang-version: 22
            sanitizer: 'address'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify Clang Installation
        run: |
          clang++ --version
          echo "Clang version verification completed"

      - name: Configure CMake
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DBUSTACHE_ENABLE_TESTING=ON \
            -DBUSTACHE_DEVELOPER_MODE=ON \
            -DBUSTACHE_USE_FMT=ON \
            # Temporarily disabled sanitizer flags:
            # ${{ matrix.sanitizer == 'address' && '-DBUSTACHE_ENABLE_SANITIZER_ADDRESS=ON' || '' }} \
            # ${{ matrix.sanitizer == 'undefined' && '-DBUSTACHE_ENABLE_SANITIZER_UNDEFINED=ON' || '' }} \
            # ${{ matrix.sanitizer == 'memory' && '-DBUSTACHE_ENABLE_SANITIZER_MEMORY=ON' || '' }} \
            # ${{ matrix.sanitizer == 'thread' && '-DBUSTACHE_ENABLE_SANITIZER_THREAD=ON' || '' }}

      - name: Build
        run: cmake --build build --parallel

      - name: Test
        run: |
          cd build
          ctest --output-on-failure --parallel --timeout 300
        env:
          # Temporarily disabled sanitizer options:
          # ASAN_OPTIONS: detect_leaks=1:abort_on_error=1:check_initialization_order=1:strict_init_order=1
          # UBSAN_OPTIONS: print_stacktrace=1:abort_on_error=1
          # MSAN_OPTIONS: abort_on_error=1:print_stats=1
          # TSAN_OPTIONS: abort_on_error=1
          DUMMY_VAR: "1"  # Placeholder to maintain env block structure

  # =============================================================================
  # macOS Apple Clang Builds
  # =============================================================================
  macos-apple-clang:
    name: macOS Apple Clang ${{ matrix.xcode-version }} (${{ matrix.build-type }}${{ matrix.sanitizer && ', ' || '' }}${{ matrix.sanitizer }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          
          # macOS 13 (Ventura) with Xcode 15.2
          - os: macos-13
            xcode-version: "15.2"
            build-type: Debug
            sanitizer: ""
          - os: macos-13
            xcode-version: "15.2"
            build-type: Release
            sanitizer: ""
          - os: macos-13
            xcode-version: "15.2"
            build-type: Debug
            sanitizer: "address"
          - os: macos-13
            xcode-version: "15.2"
            build-type: Debug
            sanitizer: "undefined"
          
          # macOS 14 (Sonoma) with Xcode 15.4
          - os: macos-14
            xcode-version: "15.4"
            build-type: Debug
            sanitizer: ""
          - os: macos-14
            xcode-version: "15.4"
            build-type: Release
            sanitizer: ""
          - os: macos-14
            xcode-version: "15.4"
            build-type: Debug
            sanitizer: "address"
          - os: macos-14
            xcode-version: "15.4"
            build-type: Debug
            sanitizer: "undefined"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode-version }}

      - name: Install dependencies
        run: |
          # Install ninja and fmt via Homebrew (cmake is pre-installed on GitHub Actions macOS runners)
          brew install ninja fmt
          # Verify cmake and ninja are available
          echo "cmake version: $(cmake --version)"
          echo "ninja version: $(ninja --version)"

      - name: Configure CMake
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DBUSTACHE_ENABLE_TESTING=ON \
            -DBUSTACHE_DEVELOPER_MODE=ON \
            -DBUSTACHE_USE_FMT=ON \
            ${{ matrix.sanitizer == 'address' && '-DBUSTACHE_ENABLE_SANITIZER_ADDRESS=ON' || '' }} \
            ${{ matrix.sanitizer == 'undefined' && '-DBUSTACHE_ENABLE_SANITIZER_UNDEFINED=ON' || '' }}

      - name: Build
        run: cmake --build build --parallel

      - name: Test
        run: |
          cd build
          ctest --output-on-failure --parallel --timeout 300
        env:
          # Sanitizer options for Apple Clang (leak detection disabled on macOS)
          ASAN_OPTIONS: detect_leaks=0:abort_on_error=1:check_initialization_order=1:strict_init_order=1
          UBSAN_OPTIONS: print_stacktrace=1:abort_on_error=1

  # =============================================================================
  # Windows MSVC Builds
  # =============================================================================
  windows-msvc:
    name: Windows MSVC ${{ matrix.vs-version }} (${{ matrix.build-type }}${{ matrix.sanitizer && ', ASAN' || '' }}${{ matrix.static_runtime && ', Static RT' || '' }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Visual Studio 2022
          - os: windows-2022
            vs-version: 2022
            build-type: Debug
            sanitizer: false
          - os: windows-2022
            vs-version: 2022
            build-type: Release
            sanitizer: false
          - os: windows-2022
            vs-version: 2022
            build-type: Debug
            sanitizer: true
          # Test with static runtime library
          - os: windows-2022
            vs-version: 2022
            build-type: Debug
            sanitizer: false
            static_runtime: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configure CMake
        run: |
          cmake -S . -B build -G "Visual Studio ${{ matrix.vs-version == '2022' && '17 2022' }}" -A x64 `
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} `
            -DBUSTACHE_ENABLE_TESTING=ON `
            -DBUSTACHE_DEVELOPER_MODE=ON `
            ${{ matrix.sanitizer && '-DBUSTACHE_ENABLE_SANITIZER_ADDRESS=ON' || '' }} `
            ${{ matrix.static_runtime && '-DBUSTACHE_MSVC_STATIC_RUNTIME=ON' || '' }}

      - name: Build
        run: cmake --build build --config ${{ matrix.build-type }} --parallel

      - name: Test
        run: |
          cd build
          ctest -C ${{ matrix.build-type }} --output-on-failure --parallel --timeout 300

  # =============================================================================
  # Special Configurations
  # =============================================================================
  special-configs:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Header-only mode
          - name: "Header-only (Ubuntu GCC)"
            os: ubuntu-22.04
            compiler: gcc-12
            cmake_flags: "-DBUSTACHE_BUILD_LIBRARY=OFF -DBUSTACHE_ENABLE_TESTING=ON"
          
          # With fmt library
          - name: "With fmt library (Ubuntu Clang)"
            os: ubuntu-22.04
            compiler: clang++-15
            cmake_flags: "-DBUSTACHE_USE_FMT=ON -DBUSTACHE_ENABLE_TESTING=ON"
            install_fmt: true

          # Coverage build (GCC only)
          - name: "Coverage (Ubuntu GCC)"
            os: ubuntu-22.04
            compiler: gcc-12
            cmake_flags: "-DBUSTACHE_ENABLE_TESTING=ON -DBUSTACHE_DEVELOPER_MODE=ON -DBUSTACHE_ENABLE_COVERAGE=ON"
            coverage: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build ${{ matrix.compiler }}
          ${{ matrix.install_fmt && 'sudo apt-get install -y libfmt-dev' || '' }}
          ${{ matrix.coverage && 'sudo apt-get install -y lcov' || '' }}

      - name: Configure CMake
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_COMPILER=${{ matrix.compiler }} \
            ${{ matrix.cmake_flags }}

      - name: Build
        run: cmake --build build --parallel

      - name: Test
        run: |
          cd build
          ctest --output-on-failure --parallel --timeout 300

      - name: Generate Coverage Report
        if: matrix.coverage
        run: |
          cd build
          lcov --directory . --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '*/test/*' '*/build/_deps/*' --output-file coverage.info
          lcov --list coverage.info

      - name: Upload Coverage
        if: matrix.coverage
        uses: codecov/codecov-action@v3
        with:
          file: build/coverage.info
          fail_ci_if_error: false

  # =============================================================================
  # Documentation and Examples
  # =============================================================================
  docs-and-examples:
    name: Documentation and Examples
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build gcc-12 g++-12 doxygen

      - name: Configure CMake
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_COMPILER=g++-12 \
            -DBUSTACHE_ENABLE_EXAMPLES=ON \
            -DBUSTACHE_ENABLE_DOCS=ON

      - name: Build
        run: cmake --build build --parallel

      - name: Test Examples
        run: |
          cd build
          # Test examples if they exist
          find . -name "*example*" -executable -type f | head -5 | while read exe; do
            echo "Testing $exe"
            timeout 30s "$exe" || echo "Example $exe completed with code $?"
          done
